<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!-- This is a checkstyle configuration file. For descriptions of
what the following rules do, please see the checkstyle configuration
page at http://checkstyle.sourceforge.net/config.html -->

<module name="Checker">
    <module name="FileTabCharacter">
        <!-- Checks that there are no tab characters in the file.
        -->
    </module>

    <module name="FileLength">
        <property name="max" value="3000"/>
    </module>

    <module name="RegexpMultiline">
        <property name="format"
                  value="System\.(out)|(err)\.print(ln)?\("/>
        <property name="message" value="Output to console is denied. Please use logging API."/>
    </module>

    <!-- Filter out Checkstyle warnings that have been suppressed with the @SuppressWarnings annotation -->
    <module name="SuppressWarningsFilter" />

    <!-- All Java AST specific tests live under TreeWalker module. -->
    <module name="TreeWalker">
        <!-- Make the @SuppressWarnings annotations available to Checkstyle -->
        <module name="SuppressWarningsHolder" />

        <!--

        IMPORT CHECKS

        -->

        <module name="AvoidStarImport"/>

        <module name="ParameterNumber">
            <property name="max" value="40"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>

        <module name="ParameterNumber">
            <property name="max" value="12"/>
            <property name="tokens" value="CTOR_DEF"/>
        </module>

        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun, sunw"/>
        </module>

        <!-- Checks for redundant import statements. -->
        <module name="RedundantImport"/>

        <module name="UnusedImports">
            <property name="severity" value="error"/>
        </module>

        <!--verify that both the Deprecated annotation and the deprecated javadoc tag are present when either one is present-->
        <module name="MissingDeprecated">
            <property name="severity" value="warning"/>
        </module>

        <module name="MissingOverride"/>

        <module name="PackageAnnotation"/>

        <!--Empty catch block-->
        <module name="EmptyBlock">
            <property name="option" value="text"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="LeftCurly">
            <!-- Checks for placement of the left curly brace ('{'). -->
            <property name="option" value="eol"/>
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF,METHOD_DEF"/>
        </module>

        <module name="RightCurly">
            <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
            the same line. e.g., the following example is fine:
            <pre>
              if {
                ...
              } else
            </pre>
            -->
            <!-- This next example is not fine:
            <pre>
              if {
                ...
              }
              else
            </pre>
            -->
            <property name="option" value="same"/>
        </module>


        <!-- Checks for braces around if and else blocks -->
        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
            <property name="allowSingleLineStatement" value="true"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="FallThrough">
            <!-- Warn about falling through to the next case statement.  Similar to
            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
            on the last non-blank line preceding the fallen-into case contains 'fall through' (or
            some other variants which we don't publicized to promote consistency).
            -->
            <property name="reliefPattern"
                      value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
            <property name="severity" value="error"/>
        </module>

        <module name="AvoidNestedBlocks"/>

        <!--Implements Bloch, Effective Java, Item 17 - Use Interfaces only to define types.-->
        <module name="InterfaceIsType"/>

        <!--Ensures that exceptions (defined as any class name conforming to some regular expression)
        are immutable. That is, have only final fields.-->
        <module name="MutableException"/>

        <!--Restricts throws statements to a specified count (default = 1)-->
        <module name="ThrowsCount">
            <property name="max" value="3"/>
        </module>

        <!--Check nested (internal) classes/interfaces are declared at the bottom
        of the class after all method and field declarations.-->
        <module name="InnerTypeLast">
            <property name="severity" value="warning"/>
        </module>

        <!--Checks that classes that define a covariant equals() method also override method equals(java.lang.Object)-->
        <module name="CovariantEquals"/>

        <!--Detects empty statements.-->
        <module name="EmptyStatement"/>

        <!--Checks that any combination of String literals with optional assignment is on the left side of an equals()
        comparison. The check also processes String.equalsIgnoreCase() invocations (which can be suppressed).-->
        <module name="EqualsAvoidNull"/>

        <!--Checks that classes that override equals() also override hashCode()-->
        <module name="EqualsHashCode"/>

        <!--Checks that there are no "magic numbers"-->
        <module name="MagicNumber">
            <property name="severity" value="warning"/>
            <property name="ignoreAnnotation" value="true"/>
        </module>

        <!--Checks that switch statement has "default" clause.-->
        <module name="MissingSwitchDefault">
            <!--<property name="severity" value="warning"/>-->
        </module>

        <!--Checks that string literals are not used with == or !=.-->
        <module name="StringLiteralEquality"/>

        <!--Restricts nested for blocks to a specified depth (default = 1).-->
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>

        <!--Restricts nested if-else blocks to a specified depth (default = 1).-->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>

        <!--Restricts nested try blocks to a specified depth (default = 1).-->
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>

        <!--Catching java.lang.Exception, java.lang.Error or java.lang.RuntimeException is almost never acceptable.-->
        <module name="IllegalCatch">
            <property name="severity" value="warning"/>
        </module>

        <!--This check can be used to ensure that types are not declared to be thrown. Declaring to
        throw java.lang.Error or java.lang.RuntimeException is almost never acceptable.-->
        <module name="IllegalThrows"/>

        <!--Checks if any class or object member explicitly initialized to default for its type value
        (null for object references, zero for numeric types and char and false for boolean.-->
        <module name="ExplicitInitialization"/>


        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="3"/>
            <property name="ignoreStringsRegexp" value='^("[&apos; \.,]*")$'/>
            <property name="ignoreOccurrenceContext" value="ANNOTATION, PLUS"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="JavaNCSS">
            <!--Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS).-->
            <property name="methodMaximum" value="100"/>
            <property name="classMaximum" value="1000"/>
            <property name="fileMaximum" value="1000"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="TodoComment">
            <property name="format" value="TODO:"/>
            <property name="severity" value="info"/>
        </module>

        <!--Checks the style of array type definitions.
        Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])-->
        <module name="ArrayTypeStyle"/>

        <!--Checks that the outer type name and the file name match. For example, the class Foo must be in a file named Foo.java.-->
        <module name="OuterTypeFilename"/>

        <module name="ModifierOrder">
            <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
               8.4.3.  The prescribed order is:
               public, protected, private, abstract, static, final, transient, volatile,
               synchronized, native, strictfp
            -->
            <property name="severity" value="error"/>
        </module>

        <module name="RedundantModifier">
            <!--Checks for redundant modifiers in:
            1.interface and annotation definitions,
            2.the final modifier on methods of final classes, and
            3.inner interface declarations that are declared as static-->
        </module>


        <!--

        NAMING CHECKS

        -->

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>

        <module name="TypeNameCheck">
            <!-- Validates static, final fields against the
          expression "^[A-Z][a-zA-Z0-9]*$". -->
            <metadata name="altname" value="TypeName"/>
        </module>

        <module name="ConstantNameCheck">
            <!-- Validates non-private, static, final fields against the supplied
        public/package final fields "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
            <metadata name="altname" value="ConstantName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="false"/>
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
            <message key="name.invalidPattern"
                     value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
        </module>

        <module name="StaticVariableNameCheck">
            <!-- Validates static, non-final fields against the supplied
          expression "^[a-z][a-zA-Z0-9]*_?$". -->
            <metadata name="altname" value="StaticVariableName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
        </module>

        <module name="MemberNameCheck">
            <!-- Validates non-static members against the supplied expression. -->
            <metadata name="altname" value="MemberName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>

        <module name="MethodNameCheck">
            <!-- Validates identifiers for method names. -->
            <metadata name="altname" value="MethodName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
        </module>

        <module name="ParameterName">
            <!-- Validates identifiers for method parameters against the
          expression "^[a-z][a-zA-Z0-9]*$". -->
        </module>

        <module name="LocalFinalVariableName">
            <!-- Validates identifiers for local final variables against the
          expression "^[a-z][a-zA-Z0-9]*$". -->
        </module>

        <module name="LocalVariableName">
            <!-- Validates identifiers for local variables against the
          expression "^[a-z][a-zA-Z0-9]*$". -->
        </module>


        <!--

        LENGTH and CODING CHECKS

        -->

        <module name="LineLength">
            <!-- Checks if a line is too long. -->
            <property name="max" value="120"/>
            <property name="severity" value="error"/>
            <property name="ignorePattern" value="^import"/>
        </module>

        <module name="AnonInnerLength">
            <property name="max" value="60"/>
        </module>

        <!--Rationale: It is considered good practice to only define one outer type per file.-->
        <module name="OuterTypeNumber"/>

        <module name="MethodCount">
            <!--Checks the number of methods declared in each type. This includes the number of each scope
            (private, package, protected and public) as well as an overall total.-->
            <property name="maxTotal" value="100"/>
            <property name="maxPublic" value="40"/>
            <property name="severity" value="warning"/>
        </module>

        <module name="GenericWhitespace"/>

        <module name="EmptyForInitializerPad"/>

        <module name="EmptyForIteratorPad"/>

        <module name="MethodParamPad"/>

        <module name="NoWhitespaceBefore"/>

        <module name="TypecastParenPad"/>

        <module name="WhitespaceAfter">
            <property name="tokens" value="TYPECAST"/>
        </module>
    </module>

</module>